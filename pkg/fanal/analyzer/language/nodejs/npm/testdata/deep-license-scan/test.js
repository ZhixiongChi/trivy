"Copyright 2019 Google LLC\\n\\n  Use of this source code is governed by an MIT-style\\n  license that can be found in the LICENSE file or at\\n  https://opensource.org/licenses/MIT.\\n*/\\nimport './_version.js';\\n/**\\n * Sends a data object to a service worker via postMessage and resolves with\\n * a response (if any).\\n *\\n * A response can be set in a message handler in the service worker by\\n * calling event.ports[0].postMessage(...), which will resolve the promise\\n * returned by messageSW(). If no response is set, the promise will not\\n * resolve.\\n *\\n * @param {ServiceWorker} sw The service worker to send the message to.\\n * @param {Object} data An object to send to the service worker.\\n * @return {Promise\u003cObject|undefined\u003e}\\n * @memberof workbox-window\\n */\\n// Better not change type of data.\\n// eslint-disable-next-line @typescript-eslint/ban-types\\nfunction messageSW(sw, data) {\\n    return new Promise((resolve) =\u003e {\\n        const messageChannel = new MessageChannel();\\n        messageChannel.port1.onmessage = (event) =\u003e {\\n            resolve(event.data);\\n        };\\n        sw.postMessage(data, [messageChannel.port2]);\\n    });\\n}\\nexport { messageSW };\\n\",\"\\\"use strict\\\";\\n// @ts-ignore\\ntry {\\n    self['workbox:core:6.5.4'] \u0026\u0026 _();\\n}\\ncatch (e) { }\\n\",\"/*\\n  Copyright 2018 Google LLC\\n\\n  Use of this source code is governed by an MIT-style\\n  license that can be found in the LICENSE file or at\\n  https://opensource.org/licenses/MIT.\\n*/\\nimport '../_version.js';\\n/**\\n * The Deferred class composes Promises in a way that allows for them to be\\n * resolved or rejected from outside the constructor. In most cases promises\\n * should be used directly, but Deferreds can be necessary when the logic to\\n * resolve a promise must be separate.\\n *\\n * @private\\n */\\nclass Deferred {\\n    /**\\n     * Creates a promise and exposes its resolve and reject functions as methods.\\n     */\\n    constructor() {\\n        this.promise = new Promise((resolve, reject) =\u003e {\\n            this.resolve = resolve;\\n            this.reject = reject;\\n        });\\n    }\\n}\\nexport { Deferred };\\n\",\"/*\\n  Copyright 2019 Google LLC\\n  Use of this source code is governed by an MIT-style\\n  license that can be found in the LICENSE file or at\\n  https://opensource.org/licenses/MIT.\\n*/\\nimport '../_version.js';\\n/**\\n * A helper function that prevents a promise from being flagged as unused.\\n *\\n * @private\\n **/\\nexport function dontWaitFor(promise) {\\n    // Effective no-op.\\n    void promise.then(() =\u003e { });\\n}\\n\",\"/*\\n  Copyright 2019 Google LLC\\n  Use of this source code is governed by an MIT-style\\n  license that can be found in the LICENSE file or at\\n  https://opensource.org/licenses/MIT.\\n*/\\nimport '../_version.js';\\nconst logger = (process.env.NODE_ENV === 'production'\\n    ? null\\n    : (() =\u003e {\\n        // Don't overwrite this value if it's already set.\\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\\n            self.__WB_DISABLE_DEV_LOGS = false;\\n        }\\n        let inGroup = false;\\n        const methodToColorMap = {\\n            debug: #7f8c8d,\\n            log: #2ecc71,\\n            warn: #f39c12,\\n            error: #c0392b,\\n            groupCollapsed: #3498db,\\n            groupEnd: null, // No colored prefix on groupEnd\\n        };\\n        const print = function (method, args) {\\n            if (self.__WB_DISABLE_DEV_LOGS) {\\n                return;\\n            }\\n            if (method === 'groupCollapsed') {\\n                // Safari doesn't print all console.groupCollapsed() arguments:\\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\\n                    console[method](...args);\\n                    return;\\n                }\\n            }\\n            const styles = [\\n                background: ${methodToColorMap[method]},\\n                border-radius: 0.5em,\\n                color: white,\\n                font-weight: bold,\\n                padding: 2px 0.5em,\\n            ];\\n            // When in a group, the workbox prefix is not displayed.\\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\\n            console[method](...logPrefix, ...args);\\n            if (method === 'groupCollapsed') {\\n                inGroup = true;\\n            }\\n            if (method === 'groupEnd') {\\n                inGroup = false;\\n            }\\n        };\\n        // eslint-disable-next-line @typescript-eslint/ban-types\\n        const api = {};\\n        const loggerMethods = Object.keys(methodToColorMap);\\n        for (const key of loggerMethods) {\\n            const method = key;\\n            api[method] = (...args) =\u003e {\\n                print(method, args);\\n            };\\n        }\\n        return api;\\n    })());\\nexport { logger };\\n\",\"/*\\n  Copyright 2019 Google LLC\\n\\n  Use of this source code is governed by an MIT-style\\n  license that can be found in the LICENSE file or at\\n  https://opensource.org/licenses/MIT.\\n*/\\n/**\\n * A minimal EventTarget shim.\\n * This is necessary because not all browsers support constructable\\n * EventTarget, so using a real EventTarget will error.\\n * @private\\n */\\nexport class WorkboxEventTarget {\\n    constructor() {\\n        this._eventListenerRegistry = new Map();\\n    }\\n    /**\\n     * @param {string} type\\n     * @param {Function} listener\\n     * @private\\n     */\\n    addEventListener(type, listener) {\\n        const foo = this._getEventListenersByType(type);\\n        foo.add(listener);\\n    }\\n    /**\\n     * @param {string} type\\n     * @param {Function} listener\\n     * @private\\n     */\\n    removeEventListener(type, listener) {\\n        this._getEventListenersByType(type).delete(listener);\\n    }\\n    /**\\n     * @param {Object} event\\n     * @private\\n     */\\n    dispatchEvent(event) {\\n        event.target = this;\\n        const listeners = this._getEventListenersByType(event.type);\\n        for (const listener of listeners) {\\n            listener(event);\\n        }\\n    }\\n    /**\\n     * Returns a Set of listeners associated with the passed event type.\\n     * If no handlers have been registered, an empty Set is returned.\\n     *\\n     * @param {string} type The event type.\\n     * @return {Set\u003cListenerCallback\u003e} An array of handler functions.\\n     * @private\\n     */\\n    _getEventListenersByType(type) {\\n        if (!this._eventListenerRegistry.has(type)) {\\n            this._eventListenerRegistry.set(type, new Set());\\n        }\\n        return this._eventListenerRegistry.get(type);\\n    }\\n}\\n\",\"/*\\n  Copyright 2019 Google LLC\\n\\n  Use of this source code is governed by an MIT-style\\n  license that can be found in the LICENSE file or at\\n  https://opensource.org/licenses/MIT.\\n*/\\nimport '../_version.js';\\n/**\\n * Returns true if two URLs have the same .href property. The URLS can be\\n * relative, and if they are the current location href is used to resolve URLs.\\n *\\n * @private\\n * @param {string} url1\\n * @param {string} url2\\n * @return {boolean}\\n */\\nexport function urlsMatch(url1, url2) {\\n    const { href } = location;\\n    return new URL(url1, href).href === new URL(url2, href).href;\\n}\\n\",\"/*\\n  Copyright 2019 Google LLC\\n\\n  Use of this source code is governed by an MIT-style\\n  license that can be found in the LICENSE file or at\\n  https://opensource.org/licenses/MIT.\\n*/\\nimport '../_version.js';\\n/**\\n * A minimal Event subclass shim.\\n * This doesn't *actually* subclass Event because not all browsers support\\n * constructable EventTarget, and using a real Event will error.\\n * @private\\n */\\nexport class WorkboxEvent {\\n    constructor(type, props) {\\n        this.type = type;\\n        Object.assign(this, props);\\n    }\\n}\\n\",\"/*\\n  Copyright 2019 Google LLC\\n\\n  Use of this source code is governed by an MIT-style\\n  license that can be found in the LICENSE file or at\\n  https://opensource.org/licenses/MIT.\\n*/\\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\\nimport { logger } from 'workbox-core/_private/logger.js';\\nimport { messageSW } from './messageSW.js';\\nimport { WorkboxEventTarget } from './utils/WorkboxEventTarget.js';\\nimport { urlsMatch } from './utils/urlsMatch.js';\\nimport { WorkboxEvent } from './utils/WorkboxEvent.js';\\nimport './_version.js';\\n// The time a SW must be in the waiting phase before we can conclude\\n// skipWaiting() wasn't called. This 200 amount wasn't scientifically\\n// chosen, but it seems to avoid false positives in my testing.\\nconst WAITING_TIMEOUT_DURATION = 200;\\n// The amount of time after a registration that we can reasonably conclude\\n// that the registration didn't trigger an update.\\nconst REGISTRATION_TIMEOUT_DURATION = 60000;\\n// The de facto standard message that a service worker should be listening for\\n// to trigger a call to skipWaiting().\\nconst SKIP_WAITING_MESSAGE = { type: 'SKIP_WAITING' };\\n/**\\n * A class to aid in handling service worker registration, updates, and\\n * reacting to service worker lifecycle events.\\n *\\n * @fires {@link workbox-window.Workbox#message}\\n * @fires {@link workbox-window.Workbox#installed}\\n * @fires {@link workbox-window.Workbox#waiting}\\n * @fires {@link workbox-window.Workbox#controlling}\\n * @fires {@link workbox-window.Workbox#activated}\\n * @fires {@link workbox-window.Workbox#redundant}\\n"